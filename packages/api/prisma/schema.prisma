// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum GenerationStatus {
    PENDING
    COMPLETED
    FAILED
}

enum SubscriptionStatus {
    INACTIVE
    ACTIVE
}

enum Category {
    CORE
    BACK
    ARMS
    CHEST
    SHOULDERS
    LEGS
}

enum Subcategory {
    // Core
    UPPER_ABS
    LOWER_ABS
    SIDE_ABS
    ABDOMINALS

    // Back
    UPPER_BACK
    MIDDLE_BACK
    LOWER_BACK

    // Arms
    BICEPS
    TRICEPS
    WRIST_EXTENSORS
    WRIST_FLEXORS

    // Chest
    CHEST

    // Shoulders
    REAR_SHOULDER
    FRONT_SHOULDER
    SIDE_SHOULDER

    // Legs
    QUADRICEPS
    HAMSTRINGS
    CALVES
    GLUTES
    INNER_THIGHS
    OUTER_THIGHS
}

enum SplitWeekDay {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum Language {
    ENGLISH
    SPANISH
    FRENCH
    GERMAN
    CHINESE
    RUSSIAN
    ITALIAN
    PORTUGUESE
}

model User {
    id                  String             @unique
    name                String?
    lastName            String?
    email               String             @unique
    subscriptionStatus  SubscriptionStatus @default(INACTIVE)
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    generation          Generation[]
    splitDay            SplitDay[]
    splitExercise       SplitExercise[]
    savedExercise       SavedExercise[]
    monthlyGenerations  Int                @default(0)
    lastGenerationReset DateTime           @default(now())

    @@index([name])
}

model MusclePercentage {
    id          Int         @id @default(autoincrement())
    category    Category
    subcategory Subcategory
    percentage  String
    exercise    Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId  Int
}

model ExerciseTranslation {
    id          Int      @id @default(autoincrement())
    exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId  Int
    language    Language @default(ENGLISH)
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([exerciseId, language])
}

model Exercise {
    id                Int                   @id @default(autoincrement())
    videoId           String
    videoStart        Int
    videoEnd          Int
    name              String
    description       String
    sets              Int
    reps              Int
    category          Category
    subcategory       Subcategory
    translations      ExerciseTranslation[]
    musclePercentages MusclePercentage[]
    savedExercise     SavedExercise[]
    splitExercise     SplitExercise[]
    generation        Generation[]
    createdAt         DateTime              @default(now())
    updatedAt         DateTime              @updatedAt
}

model SavedExercise {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([userId, exerciseId])
}

model SplitExercise {
    id         Int      @id @default(autoincrement())
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    sets       Int
    reps       Int
    rank       String
    splitDay   SplitDay @relation(fields: [splitDayId], references: [id], onDelete: Cascade)
    splitDayId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([splitDayId, rank])
}

model GenerationTranslation {
    id           Int        @id @default(autoincrement())
    generation   Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)
    generationId Int
    language     Language   @default(ENGLISH)
    name         String
    description  String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@unique([generationId, language])
}

model Generation {
    id           Int                     @id @default(autoincrement())
    status       GenerationStatus        @default(PENDING)
    image        String
    exercise     Exercise[]
    user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    translations GenerationTranslation[]
}

model SplitDay {
    id            Int             @id @default(autoincrement())
    name          String
    day           SplitWeekDay
    splitExercise SplitExercise[]
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}
